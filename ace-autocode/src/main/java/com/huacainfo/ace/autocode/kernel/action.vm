package com.huacainfo.ace.kernel.web.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.huacainfo.ace.common.model.PageParamNoChangeSord;
import com.huacainfo.ace.common.result.MessageResponse;
import com.huacainfo.ace.common.result.PageResult;
import com.huacainfo.ace.common.result.SingleResult;
import com.huacainfo.ace.kernel.model.$!{bean.name};
import com.huacainfo.ace.kernel.service.$!{bean.name}Service;
import com.huacainfo.ace.kernel.vo.$!{bean.name}Vo;
import com.huacainfo.ace.kernel.vo.$!{bean.name}QVo;

@Controller
@RequestMapping("/$!{bean.lowerName}")
public class $!{bean.name}Controller extends KernelBaseController {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired
	private $!{bean.name}Service $!{bean.lowerName}Service;

	@RequestMapping(value = "/find$!{bean.name}List.do")
	@ResponseBody
	public PageResult<$!{bean.name}Vo> find$!{bean.name}List($!{bean.name}QVo condition,
			PageParamNoChangeSord page) throws Exception {
		PageResult<$!{bean.name}Vo> rst = this.$!{bean.lowerName}Service
				.find$!{bean.name}List(condition, page.getStart(), page.getLimit(),
						page.getOrderBy());
		if (rst.getTotal() == 0) {
			rst.setTotal(page.getTotalRecord());
		}
	
		return rst;
	}

	@RequestMapping(value = "/insert$!{bean.name}.do")
	@ResponseBody
	public MessageResponse insert$!{bean.name}(String jsons) throws Exception {
		$!{bean.name} obj = JSON.parseObject(jsons, $!{bean.name}.class);
		return this.$!{bean.lowerName}Service
				.insert$!{bean.name}(obj, this.getCurUserProp());
	}

	@RequestMapping(value = "/update$!{bean.name}.do")
	@ResponseBody
	public MessageResponse update$!{bean.name}(String jsons) throws Exception {
		$!{bean.name} obj = JSON.parseObject(jsons, $!{bean.name}.class);
		return this.$!{bean.lowerName}Service
				.update$!{bean.name}(obj, this.getCurUserProp());
	}

	@RequestMapping(value = "/select$!{bean.name}ByPrimaryKey.do")
	@ResponseBody
	public SingleResult<$!{bean.name}> select$!{bean.name}ByPrimaryKey(String id)
			throws Exception {
		return this.$!{bean.lowerName}Service.select$!{bean.name}ByPrimaryKey(id);
	}

	@RequestMapping(value = "/delete$!{bean.name}By$!{bean.name}Id.do")
	@ResponseBody
	public MessageResponse delete$!{bean.name}By$!{bean.name}Id(String jsons)
			throws Exception {
		JSONObject json = JSON.parseObject(jsons);
		String id = json.getString("id");
		return this.$!{bean.lowerName}Service.delete$!{bean.name}By$!{bean.name}Id(id,
				this.getCurUserProp());
	}
}
